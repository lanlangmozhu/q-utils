---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# Q-Utils 项目开发规则

## 1. 技术栈规范

### 1.1 基础开发环境
- 使用 `pnpm` 作为包管理器
- 使用 `TypeScript` 进行开发
- 使用 `ESM` 模块化规范
- 不引用任何第三方库（保持独立性）

### 1.2 构建工具
- 使用 `rollup` 进行打包
- 使用 `rollup-plugin-typescript2` 生成类型定义
- 使用 `rollup-plugin-dts` 生成TS类声明文件
- 使用 `rollup-plugin-terser` 进行代码压缩
- 使用 `rollup-plugin-commonjs` 处理 CommonJS 模块
- 使用 `rollup-plugin-node-resolve` 进行模块解析

### 1.3 代码质量工具
- 使用 `prettier` 进行代码格式化
- 使用 `eslint` 进行代码检查
- 使用 `typedoc` 生成文档
- 使用 `jest` 进行单元测试

## 2. 代码组织规范

### 2.1 文件组织
- 按功能模块分类组织文件
- 每个文件只包含一个功能
- 文件必须包含完整的类型定义
- 保持文件结构清晰，避免过度嵌套

### 2.2 代码注释规范
每个函数必须包含以下注释：
- 功能说明
- 参数说明
- 返回值说明
- 使用示例
- 注意事项（如果有）
- 更新记录（如果有）

### 2.3 功能模块分类
1. 数组相关（array）
2. 浏览器和设备检测（browser）
3. 颜色相关（color）
4. 日期相关（date）
5. DOM操作相关（dom）
6. 文件操作相关（file）
7. 函数相关（function）
8. 网络操作相关（network）
9. 数字相关（number）
10. 对象相关（object）
11. 存储管理相关（storage）
12. 字符串相关（string）
13. 通用工具（utils）
14. 动画相关（animation）
15. 音频相关（audio）
16. 视频相关（video）
17. 图片相关（image）

## 3. 文档维护规范

### 3.1 文档更新要求
当更新源代码时，必须同步更新以下文档：
1. 对应功能测试用例（test/[module]/）
1. 对应功能的文档（docs/[module].md）
2. 使用示例（examples/index.html）
3. 功能导出说明
4. README.md
5. 使用指南（docs/USAGE.md）
6. 项目总结（docs/SUMMARY.md）

### 3.2 文档内容要求
- README.md 更新内容：
  - 功能导出说明
  - 使用示例更新
  - 新功能说明

- USAGE.md 更新内容：
  - 功能导出说明
  - 使用示例更新
  - 目录更新

- SUMMARY.md 更新内容：
  - 功能导出说明
  - 使用示例更新
  - 工具函数实现说明
  - 功能扩展说明

### 3.3 变更记录维护
- CHANGELOG.md：记录功能更新内容
- BUILD_CHANGELOG.md：记录构建相关更新
- ERROR.md：记录测试和构建错误

## 4. 测试规范

### 4.1 单元测试要求
- 每个功能必须有对应的单元测试
- 测试用例必须覆盖主要功能点
- 测试用例必须包含边界条件
- 测试用例必须包含错误处理

### 4.2 测试错误处理流程
1. 不添加不存在的功能文件
2. 删除不存在功能的测试
3. 检查测试正确性
4. 检查测试覆盖率
5. 检查测试运行状态
6. 检查测试输出结果
7. 等待确认修复后继续测试

### 4.3 构建错误处理流程
1. 运行单元测试
2. 发现错误时提供至少两个修复方案
3. 等待确认修复方案
4. 应用修复方案
5. 重新运行测试直到通过
6. 继续构建流程

## 5. 命名规范

### 5.1 函数命名冲突处理
当发生函数命名冲突时：
1. 检查功能是否相同
   - 相同：直接引用已实现的方法
   - 不同：修改当前方法名称

### 5.2 命名规则
- 函数名：使用驼峰命名法（camelCase）
- 类名：使用帕斯卡命名法（PascalCase）
- 常量：使用大写下划线命名法（UPPER_SNAKE_CASE）
- 私有属性：使用下划线前缀（_privateProperty）

## 6. 代码质量规范

### 6.1 代码风格
- 遵循 TypeScript 最佳实践
- 保持代码简洁清晰
- 避免重复代码
- 合理使用设计模式

### 6.2 性能优化
- 避免不必要的计算
- 优化循环和递归
- 合理使用缓存
- 注意内存使用

### 6.3 安全性
- 输入验证
- 类型检查
- 错误处理
- 安全的数据处理

## 7. 版本管理规范

### 7.1 版本号规则
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 7.2 分支管理
- main：主分支
- develop：开发分支
- feature/*：功能分支
- bugfix/*：修复分支
- release/*：发布分支

### 7.3 提交信息规范
- feat：新功能
- fix：修复问题
- docs：文档更新
- style：代码格式
- refactor：重构
- test：测试相关
- chore：构建过程或辅助工具的变动

## 8. 发布规范

### 8.1 发布前检查
- 所有测试通过
- 文档更新完整
- 示例运行正常
- 版本号更新
- CHANGELOG 更新

### 8.2 发布流程
1. 更新版本号
2. 运行完整测试
3. 生成构建文件
4. 更新文档
5. 提交代码
6. 创建标签
7. 发布包

### 8.3 发布后确认
- 包安装测试
- 功能可用性确认
- 文档可访问性确认
- 示例可运行性确认 